// generated by genptr.py, do not modify
#include "g_local.hpp"
#include "g_ptrs.hpp"
extern bool Boss2_CheckAttack(edict_t *);
extern bool Jorg_CheckAttack(edict_t *);
extern bool M_CheckAttack(edict_t *);
extern bool Makron_CheckAttack(edict_t *);
extern bool medic_checkattack(edict_t *);
extern bool mutant_checkattack(edict_t *);
extern const mmove_t actor_move_attack;
extern const mmove_t actor_move_death1;
extern const mmove_t actor_move_death2;
extern const mmove_t actor_move_flipoff;
extern const mmove_t actor_move_pain1;
extern const mmove_t actor_move_pain2;
extern const mmove_t actor_move_pain3;
extern const mmove_t actor_move_run;
extern const mmove_t actor_move_stand;
extern const mmove_t actor_move_taunt;
extern const mmove_t actor_move_walk;
extern const mmove_t berserk_move_attack_club;
extern const mmove_t berserk_move_attack_spike;
extern const mmove_t berserk_move_death1;
extern const mmove_t berserk_move_death2;
extern const mmove_t berserk_move_pain1;
extern const mmove_t berserk_move_pain2;
extern const mmove_t berserk_move_run1;
extern const mmove_t berserk_move_stand;
extern const mmove_t berserk_move_stand_fidget;
extern const mmove_t berserk_move_walk;
extern const mmove_t boss2_move_attack_mg;
extern const mmove_t boss2_move_attack_post_mg;
extern const mmove_t boss2_move_attack_pre_mg;
extern const mmove_t boss2_move_attack_rocket;
extern const mmove_t boss2_move_death;
extern const mmove_t boss2_move_pain_heavy;
extern const mmove_t boss2_move_pain_light;
extern const mmove_t boss2_move_run;
extern const mmove_t boss2_move_stand;
extern const mmove_t boss2_move_walk;
extern const mmove_t brain_move_attack1;
extern const mmove_t brain_move_attack2;
extern const mmove_t brain_move_death1;
extern const mmove_t brain_move_death2;
extern const mmove_t brain_move_duck;
extern const mmove_t brain_move_idle;
extern const mmove_t brain_move_pain1;
extern const mmove_t brain_move_pain2;
extern const mmove_t brain_move_pain3;
extern const mmove_t brain_move_run;
extern const mmove_t brain_move_stand;
extern const mmove_t brain_move_walk1;
extern const mmove_t chick_move_attack1;
extern const mmove_t chick_move_death1;
extern const mmove_t chick_move_death2;
extern const mmove_t chick_move_duck;
extern const mmove_t chick_move_end_attack1;
extern const mmove_t chick_move_end_slash;
extern const mmove_t chick_move_fidget;
extern const mmove_t chick_move_pain1;
extern const mmove_t chick_move_pain2;
extern const mmove_t chick_move_pain3;
extern const mmove_t chick_move_run;
extern const mmove_t chick_move_slash;
extern const mmove_t chick_move_stand;
extern const mmove_t chick_move_start_attack1;
extern const mmove_t chick_move_start_run;
extern const mmove_t chick_move_start_slash;
extern const mmove_t chick_move_walk;
extern const mmove_t flipper_move_attack;
extern const mmove_t flipper_move_death;
extern const mmove_t flipper_move_pain1;
extern const mmove_t flipper_move_pain2;
extern const mmove_t flipper_move_run_loop;
extern const mmove_t flipper_move_run_start;
extern const mmove_t flipper_move_stand;
extern const mmove_t flipper_move_start_run;
extern const mmove_t flipper_move_walk;
extern const mmove_t floater_move_attack1;
extern const mmove_t floater_move_attack2;
extern const mmove_t floater_move_attack3;
extern const mmove_t floater_move_pain1;
extern const mmove_t floater_move_pain2;
extern const mmove_t floater_move_run;
extern const mmove_t floater_move_stand1;
extern const mmove_t floater_move_stand2;
extern const mmove_t floater_move_walk;
extern const mmove_t flyer_move_attack2;
extern const mmove_t flyer_move_end_melee;
extern const mmove_t flyer_move_loop_melee;
extern const mmove_t flyer_move_pain1;
extern const mmove_t flyer_move_pain2;
extern const mmove_t flyer_move_pain3;
extern const mmove_t flyer_move_run;
extern const mmove_t flyer_move_stand;
extern const mmove_t flyer_move_start_melee;
extern const mmove_t flyer_move_walk;
extern const mmove_t gladiator_move_attack_gun;
extern const mmove_t gladiator_move_attack_melee;
extern const mmove_t gladiator_move_death;
extern const mmove_t gladiator_move_pain;
extern const mmove_t gladiator_move_pain_air;
extern const mmove_t gladiator_move_run;
extern const mmove_t gladiator_move_stand;
extern const mmove_t gladiator_move_walk;
extern const mmove_t gunner_move_attack_chain;
extern const mmove_t gunner_move_attack_grenade;
extern const mmove_t gunner_move_death;
extern const mmove_t gunner_move_duck;
extern const mmove_t gunner_move_endfire_chain;
extern const mmove_t gunner_move_fidget;
extern const mmove_t gunner_move_fire_chain;
extern const mmove_t gunner_move_pain1;
extern const mmove_t gunner_move_pain2;
extern const mmove_t gunner_move_pain3;
extern const mmove_t gunner_move_run;
extern const mmove_t gunner_move_stand;
extern const mmove_t gunner_move_walk;
extern const mmove_t hover_move_attack1;
extern const mmove_t hover_move_death1;
extern const mmove_t hover_move_end_attack;
extern const mmove_t hover_move_pain1;
extern const mmove_t hover_move_pain2;
extern const mmove_t hover_move_pain3;
extern const mmove_t hover_move_run;
extern const mmove_t hover_move_stand;
extern const mmove_t hover_move_start_attack;
extern const mmove_t hover_move_walk;
extern const mmove_t infantry_move_attack1;
extern const mmove_t infantry_move_attack2;
extern const mmove_t infantry_move_death1;
extern const mmove_t infantry_move_death2;
extern const mmove_t infantry_move_death3;
extern const mmove_t infantry_move_duck;
extern const mmove_t infantry_move_fidget;
extern const mmove_t infantry_move_pain1;
extern const mmove_t infantry_move_pain2;
extern const mmove_t infantry_move_run;
extern const mmove_t infantry_move_stand;
extern const mmove_t infantry_move_walk;
extern const mmove_t insane_move_crawl;
extern const mmove_t insane_move_crawl_death;
extern const mmove_t insane_move_crawl_pain;
extern const mmove_t insane_move_cross;
extern const mmove_t insane_move_down;
extern const mmove_t insane_move_downtoup;
extern const mmove_t insane_move_jumpdown;
extern const mmove_t insane_move_run_insane;
extern const mmove_t insane_move_run_normal;
extern const mmove_t insane_move_runcrawl;
extern const mmove_t insane_move_stand_death;
extern const mmove_t insane_move_stand_insane;
extern const mmove_t insane_move_stand_normal;
extern const mmove_t insane_move_stand_pain;
extern const mmove_t insane_move_struggle_cross;
extern const mmove_t insane_move_uptodown;
extern const mmove_t insane_move_walk_insane;
extern const mmove_t insane_move_walk_normal;
extern const mmove_t jorg_move_attack1;
extern const mmove_t jorg_move_attack2;
extern const mmove_t jorg_move_death;
extern const mmove_t jorg_move_end_attack1;
extern const mmove_t jorg_move_pain1;
extern const mmove_t jorg_move_pain2;
extern const mmove_t jorg_move_pain3;
extern const mmove_t jorg_move_run;
extern const mmove_t jorg_move_stand;
extern const mmove_t jorg_move_start_attack1;
extern const mmove_t jorg_move_walk;
extern const mmove_t makron_move_attack3;
extern const mmove_t makron_move_attack4;
extern const mmove_t makron_move_attack5;
extern const mmove_t makron_move_death2;
extern const mmove_t makron_move_pain4;
extern const mmove_t makron_move_pain5;
extern const mmove_t makron_move_pain6;
extern const mmove_t makron_move_run;
extern const mmove_t makron_move_sight;
extern const mmove_t makron_move_stand;
extern const mmove_t makron_move_walk;
extern const mmove_t medic_move_attackBlaster;
extern const mmove_t medic_move_attackCable;
extern const mmove_t medic_move_attackHyperBlaster;
extern const mmove_t medic_move_death;
extern const mmove_t medic_move_duck;
extern const mmove_t medic_move_pain1;
extern const mmove_t medic_move_pain2;
extern const mmove_t medic_move_run;
extern const mmove_t medic_move_stand;
extern const mmove_t medic_move_walk;
extern const mmove_t mutant_move_attack;
extern const mmove_t mutant_move_death1;
extern const mmove_t mutant_move_death2;
extern const mmove_t mutant_move_idle;
extern const mmove_t mutant_move_jump;
extern const mmove_t mutant_move_pain1;
extern const mmove_t mutant_move_pain2;
extern const mmove_t mutant_move_pain3;
extern const mmove_t mutant_move_run;
extern const mmove_t mutant_move_stand;
extern const mmove_t mutant_move_start_walk;
extern const mmove_t mutant_move_walk;
extern const mmove_t parasite_move_death;
extern const mmove_t parasite_move_drain;
extern const mmove_t parasite_move_end_fidget;
extern const mmove_t parasite_move_fidget;
extern const mmove_t parasite_move_pain1;
extern const mmove_t parasite_move_run;
extern const mmove_t parasite_move_stand;
extern const mmove_t parasite_move_start_fidget;
extern const mmove_t parasite_move_start_run;
extern const mmove_t parasite_move_start_walk;
extern const mmove_t parasite_move_walk;
extern const mmove_t soldier_move_attack1;
extern const mmove_t soldier_move_attack2;
extern const mmove_t soldier_move_attack3;
extern const mmove_t soldier_move_attack4;
extern const mmove_t soldier_move_attack6;
extern const mmove_t soldier_move_death1;
extern const mmove_t soldier_move_death2;
extern const mmove_t soldier_move_death3;
extern const mmove_t soldier_move_death4;
extern const mmove_t soldier_move_death5;
extern const mmove_t soldier_move_death6;
extern const mmove_t soldier_move_duck;
extern const mmove_t soldier_move_pain1;
extern const mmove_t soldier_move_pain2;
extern const mmove_t soldier_move_pain3;
extern const mmove_t soldier_move_pain4;
extern const mmove_t soldier_move_run;
extern const mmove_t soldier_move_stand1;
extern const mmove_t soldier_move_stand3;
extern const mmove_t soldier_move_start_run;
extern const mmove_t soldier_move_walk1;
extern const mmove_t soldier_move_walk2;
extern const mmove_t supertank_move_attack1;
extern const mmove_t supertank_move_attack2;
extern const mmove_t supertank_move_death;
extern const mmove_t supertank_move_end_attack1;
extern const mmove_t supertank_move_forward;
extern const mmove_t supertank_move_pain1;
extern const mmove_t supertank_move_pain2;
extern const mmove_t supertank_move_pain3;
extern const mmove_t supertank_move_run;
extern const mmove_t supertank_move_stand;
extern const mmove_t tank_move_attack_blast;
extern const mmove_t tank_move_attack_chain;
extern const mmove_t tank_move_attack_fire_rocket;
extern const mmove_t tank_move_attack_post_blast;
extern const mmove_t tank_move_attack_post_rocket;
extern const mmove_t tank_move_attack_pre_rocket;
extern const mmove_t tank_move_attack_strike;
extern const mmove_t tank_move_death;
extern const mmove_t tank_move_pain1;
extern const mmove_t tank_move_pain2;
extern const mmove_t tank_move_pain3;
extern const mmove_t tank_move_reattack_blast;
extern const mmove_t tank_move_run;
extern const mmove_t tank_move_stand;
extern const mmove_t tank_move_start_run;
extern const mmove_t tank_move_walk;
extern void actor_attack(edict_t *);
extern void actor_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void actor_pain(edict_t *, edict_t *, float, int);
extern void actor_run(edict_t *);
extern void actor_stand(edict_t *);
extern void actor_use(edict_t *, edict_t *, edict_t *);
extern void actor_walk(edict_t *);
extern void AngleMove_Begin(edict_t *);
extern void AngleMove_Done(edict_t *);
extern void AngleMove_Final(edict_t *);
extern void barrel_delay(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void barrel_explode(edict_t *);
extern void barrel_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void berserk_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void berserk_melee(edict_t *);
extern void berserk_pain(edict_t *, edict_t *, float, int);
extern void berserk_run(edict_t *);
extern void berserk_search(edict_t *);
extern void berserk_sight(edict_t *, edict_t *);
extern void berserk_stand(edict_t *);
extern void berserk_walk(edict_t *);
extern void bfg_explode(edict_t *);
extern void bfg_think(edict_t *);
extern void bfg_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void blaster_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void body_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void boss2_attack(edict_t *);
extern void boss2_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void boss2_pain(edict_t *, edict_t *, float, int);
extern void boss2_run(edict_t *);
extern void boss2_search(edict_t *);
extern void boss2_stand(edict_t *);
extern void boss2_walk(edict_t *);
extern void BossExplode(edict_t *);
extern void brain_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void brain_dodge(edict_t *, edict_t *, float);
extern void brain_idle(edict_t *);
extern void brain_melee(edict_t *);
extern void brain_pain(edict_t *, edict_t *, float, int);
extern void brain_run(edict_t *);
extern void brain_search(edict_t *);
extern void brain_sight(edict_t *, edict_t *);
extern void brain_stand(edict_t *);
extern void brain_walk(edict_t *);
extern void button_done(edict_t *);
extern void button_killed(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void button_return(edict_t *);
extern void button_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void button_use(edict_t *, edict_t *, edict_t *);
extern void button_wait(edict_t *);
extern void chick_attack(edict_t *);
extern void chick_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void chick_dodge(edict_t *, edict_t *, float);
extern void chick_melee(edict_t *);
extern void chick_pain(edict_t *, edict_t *, float, int);
extern void chick_run(edict_t *);
extern void chick_sight(edict_t *, edict_t *);
extern void chick_stand(edict_t *);
extern void chick_walk(edict_t *);
extern void commander_body_drop(edict_t *);
extern void commander_body_think(edict_t *);
extern void commander_body_use(edict_t *, edict_t *, edict_t *);
extern void debris_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void door_blocked(edict_t *, edict_t *);
extern void door_go_down(edict_t *);
extern void door_hit_bottom(edict_t *);
extern void door_hit_top(edict_t *);
extern void door_killed(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void door_secret_blocked(edict_t *, edict_t *);
extern void door_secret_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void door_secret_done(edict_t *);
extern void door_secret_move1(edict_t *);
extern void door_secret_move2(edict_t *);
extern void door_secret_move3(edict_t *);
extern void door_secret_move4(edict_t *);
extern void door_secret_move5(edict_t *);
extern void door_secret_move6(edict_t *);
extern void door_secret_use(edict_t *, edict_t *, edict_t *);
extern void door_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void door_use(edict_t *, edict_t *, edict_t *);
extern void DoRespawn(edict_t *);
extern void drop_make_touchable(edict_t *);
extern void drop_temp_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void droptofloor(edict_t *);
extern void flipper_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void flipper_melee(edict_t *);
extern void flipper_pain(edict_t *, edict_t *, float, int);
extern void flipper_sight(edict_t *, edict_t *);
extern void flipper_stand(edict_t *);
extern void flipper_start_run(edict_t *);
extern void flipper_walk(edict_t *);
extern void floater_attack(edict_t *);
extern void floater_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void floater_idle(edict_t *);
extern void floater_melee(edict_t *);
extern void floater_pain(edict_t *, edict_t *, float, int);
extern void floater_run(edict_t *);
extern void floater_sight(edict_t *, edict_t *);
extern void floater_stand(edict_t *);
extern void floater_walk(edict_t *);
extern void flyer_attack(edict_t *);
extern void flyer_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void flyer_idle(edict_t *);
extern void flyer_melee(edict_t *);
extern void flyer_pain(edict_t *, edict_t *, float, int);
extern void flyer_run(edict_t *);
extern void flyer_sight(edict_t *, edict_t *);
extern void flyer_stand(edict_t *);
extern void flyer_walk(edict_t *);
extern void flymonster_start_go(edict_t *);
extern void func_clock_think(edict_t *);
extern void func_clock_use(edict_t *, edict_t *, edict_t *);
extern void func_conveyor_use(edict_t *, edict_t *, edict_t *);
extern void func_explosive_explode(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void func_explosive_spawn(edict_t *, edict_t *, edict_t *);
extern void func_explosive_use(edict_t *, edict_t *, edict_t *);
extern void func_object_release(edict_t *);
extern void func_object_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void func_object_use(edict_t *, edict_t *, edict_t *);
extern void func_timer_think(edict_t *);
extern void func_timer_use(edict_t *, edict_t *, edict_t *);
extern void func_train_find(edict_t *);
extern void func_wall_use(edict_t *, edict_t *, edict_t *);
extern void G_FreeEdict(edict_t *);
extern void gib_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void gib_think(edict_t *);
extern void gib_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void gladiator_attack(edict_t *);
extern void gladiator_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void gladiator_idle(edict_t *);
extern void gladiator_melee(edict_t *);
extern void gladiator_pain(edict_t *, edict_t *, float, int);
extern void gladiator_run(edict_t *);
extern void gladiator_search(edict_t *);
extern void gladiator_sight(edict_t *, edict_t *);
extern void gladiator_stand(edict_t *);
extern void gladiator_walk(edict_t *);
extern void Grenade_Explode(edict_t *);
extern void Grenade_Touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void gunner_attack(edict_t *);
extern void gunner_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void gunner_dodge(edict_t *, edict_t *, float);
extern void gunner_pain(edict_t *, edict_t *, float, int);
extern void gunner_run(edict_t *);
extern void gunner_search(edict_t *);
extern void gunner_sight(edict_t *, edict_t *);
extern void gunner_stand(edict_t *);
extern void gunner_walk(edict_t *);
extern void hover_deadthink(edict_t *);
extern void hover_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void hover_pain(edict_t *, edict_t *, float, int);
extern void hover_run(edict_t *);
extern void hover_search(edict_t *);
extern void hover_sight(edict_t *, edict_t *);
extern void hover_stand(edict_t *);
extern void hover_start_attack(edict_t *);
extern void hover_walk(edict_t *);
extern void hurt_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void hurt_use(edict_t *, edict_t *, edict_t *);
extern void infantry_attack(edict_t *);
extern void infantry_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void infantry_dodge(edict_t *, edict_t *, float);
extern void infantry_fidget(edict_t *);
extern void infantry_pain(edict_t *, edict_t *, float, int);
extern void infantry_run(edict_t *);
extern void infantry_sight(edict_t *, edict_t *);
extern void infantry_stand(edict_t *);
extern void infantry_walk(edict_t *);
extern void insane_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void insane_pain(edict_t *, edict_t *, float, int);
extern void insane_run(edict_t *);
extern void insane_stand(edict_t *);
extern void insane_walk(edict_t *);
extern void jorg_attack(edict_t *);
extern void jorg_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void jorg_pain(edict_t *, edict_t *, float, int);
extern void jorg_run(edict_t *);
extern void jorg_search(edict_t *);
extern void jorg_stand(edict_t *);
extern void jorg_walk(edict_t *);
extern void light_use(edict_t *, edict_t *, edict_t *);
extern void M_droptofloor(edict_t *);
extern void M_FliesOff(edict_t *);
extern void M_FliesOn(edict_t *);
extern void makron_attack(edict_t *);
extern void makron_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void makron_pain(edict_t *, edict_t *, float, int);
extern void makron_run(edict_t *);
extern void makron_sight(edict_t *, edict_t *);
extern void makron_stand(edict_t *);
extern void makron_torso_think(edict_t *);
extern void makron_walk(edict_t *);
extern void MakronSpawn(edict_t *);
extern void medic_attack(edict_t *);
extern void medic_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void medic_dodge(edict_t *, edict_t *, float);
extern void medic_idle(edict_t *);
extern void medic_pain(edict_t *, edict_t *, float, int);
extern void medic_run(edict_t *);
extern void medic_search(edict_t *);
extern void medic_sight(edict_t *, edict_t *);
extern void medic_stand(edict_t *);
extern void medic_walk(edict_t *);
extern void MegaHealth_think(edict_t *);
extern void misc_banner_think(edict_t *);
extern void misc_blackhole_think(edict_t *);
extern void misc_blackhole_use(edict_t *, edict_t *, edict_t *);
extern void misc_deadsoldier_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void misc_easterchick2_think(edict_t *);
extern void misc_easterchick_think(edict_t *);
extern void misc_eastertank_think(edict_t *);
extern void misc_satellite_dish_think(edict_t *);
extern void misc_satellite_dish_use(edict_t *, edict_t *, edict_t *);
extern void misc_strogg_ship_use(edict_t *, edict_t *, edict_t *);
extern void misc_viper_bomb_prethink(edict_t *);
extern void misc_viper_bomb_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void misc_viper_bomb_use(edict_t *, edict_t *, edict_t *);
extern void misc_viper_use(edict_t *, edict_t *, edict_t *);
extern void monster_think(edict_t *);
extern void monster_triggered_spawn(edict_t *);
extern void monster_triggered_spawn_use(edict_t *, edict_t *, edict_t *);
extern void monster_use(edict_t *, edict_t *, edict_t *);
extern void Move_Begin(edict_t *);
extern void Move_Done(edict_t *);
extern void Move_Final(edict_t *);
extern void multi_wait(edict_t *);
extern void mutant_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void mutant_idle(edict_t *);
extern void mutant_jump(edict_t *);
extern void mutant_jump_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void mutant_melee(edict_t *);
extern void mutant_pain(edict_t *, edict_t *, float, int);
extern void mutant_run(edict_t *);
extern void mutant_search(edict_t *);
extern void mutant_sight(edict_t *, edict_t *);
extern void mutant_stand(edict_t *);
extern void mutant_walk(edict_t *);
extern void parasite_attack(edict_t *);
extern void parasite_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void parasite_idle(edict_t *);
extern void parasite_pain(edict_t *, edict_t *, float, int);
extern void parasite_sight(edict_t *, edict_t *);
extern void parasite_stand(edict_t *);
extern void parasite_start_run(edict_t *);
extern void parasite_start_walk(edict_t *);
extern void path_corner_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void plat_blocked(edict_t *, edict_t *);
extern void plat_go_down(edict_t *);
extern void plat_hit_bottom(edict_t *);
extern void plat_hit_top(edict_t *);
extern void player_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void player_pain(edict_t *, edict_t *, float, int);
extern void point_combat_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void rocket_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void rotating_blocked(edict_t *, edict_t *);
extern void rotating_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void rotating_use(edict_t *, edict_t *, edict_t *);
extern void soldier_attack(edict_t *);
extern void soldier_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void soldier_dodge(edict_t *, edict_t *, float);
extern void soldier_pain(edict_t *, edict_t *, float, int);
extern void soldier_run(edict_t *);
extern void soldier_sight(edict_t *, edict_t *);
extern void soldier_stand(edict_t *);
extern void soldier_walk(edict_t *);
extern void SP_CreateCoopSpots(edict_t *);
extern void SP_FixCoopSpots(edict_t *);
extern void supertank_attack(edict_t *);
extern void supertank_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void supertank_pain(edict_t *, edict_t *, float, int);
extern void supertank_run(edict_t *);
extern void supertank_search(edict_t *);
extern void supertank_stand(edict_t *);
extern void supertank_walk(edict_t *);
extern void swimmonster_start_go(edict_t *);
extern void tank_attack(edict_t *);
extern void tank_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void tank_idle(edict_t *);
extern void tank_pain(edict_t *, edict_t *, float, int);
extern void tank_run(edict_t *);
extern void tank_sight(edict_t *, edict_t *);
extern void tank_stand(edict_t *);
extern void tank_walk(edict_t *);
extern void target_actor_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void target_crosslevel_target_think(edict_t *);
extern void target_earthquake_think(edict_t *);
extern void target_earthquake_use(edict_t *, edict_t *, edict_t *);
extern void target_explosion_explode(edict_t *);
extern void target_laser_start(edict_t *);
extern void target_laser_think(edict_t *);
extern void target_laser_use(edict_t *, edict_t *, edict_t *);
extern void target_lightramp_think(edict_t *);
extern void target_lightramp_use(edict_t *, edict_t *, edict_t *);
extern void target_string_use(edict_t *, edict_t *, edict_t *);
extern void teleporter_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void TH_viewthing(edict_t *);
extern void Think_AccelMove(edict_t *);
extern void Think_Boss3Stand(edict_t *);
extern void Think_CalcMoveSpeed(edict_t *);
extern void Think_Delay(edict_t *);
extern void Think_SpawnDoorTrigger(edict_t *);
extern void Touch_DoorTrigger(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void Touch_Item(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void Touch_Multi(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void Touch_Plat_Center(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void train_blocked(edict_t *, edict_t *);
extern void train_next(edict_t *);
extern void train_use(edict_t *, edict_t *, edict_t *);
extern void train_wait(edict_t *);
extern void trigger_counter_use(edict_t *, edict_t *, edict_t *);
extern void trigger_crosslevel_trigger_use(edict_t *, edict_t *, edict_t *);
extern void trigger_elevator_init(edict_t *);
extern void trigger_elevator_use(edict_t *, edict_t *, edict_t *);
extern void trigger_enable(edict_t *, edict_t *, edict_t *);
extern void trigger_gravity_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void trigger_key_use(edict_t *, edict_t *, edict_t *);
extern void trigger_monsterjump_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void trigger_push_touch(edict_t *, edict_t *, cplane_t *, csurface_t *);
extern void trigger_relay_use(edict_t *, edict_t *, edict_t *);
extern void turret_blocked(edict_t *, edict_t *);
extern void turret_breach_finish_init(edict_t *);
extern void turret_breach_think(edict_t *);
extern void turret_driver_die(edict_t *, edict_t *, edict_t *, int, vec3_t);
extern void turret_driver_link(edict_t *);
extern void turret_driver_think(edict_t *);
extern void Use_Areaportal(edict_t *, edict_t *, edict_t *);
extern void Use_Boss3(edict_t *, edict_t *, edict_t *);
extern void Use_Item(edict_t *, edict_t *, edict_t *);
extern void use_killbox(edict_t *, edict_t *, edict_t *);
extern void Use_Multi(edict_t *, edict_t *, edict_t *);
extern void Use_Plat(edict_t *, edict_t *, edict_t *);
extern void use_target_blaster(edict_t *, edict_t *, edict_t *);
extern void use_target_changelevel(edict_t *, edict_t *, edict_t *);
extern void use_target_explosion(edict_t *, edict_t *, edict_t *);
extern void use_target_goal(edict_t *, edict_t *, edict_t *);
extern void Use_Target_Help(edict_t *, edict_t *, edict_t *);
extern void use_target_secret(edict_t *, edict_t *, edict_t *);
extern void use_target_spawner(edict_t *, edict_t *, edict_t *);
extern void Use_Target_Speaker(edict_t *, edict_t *, edict_t *);
extern void use_target_splash(edict_t *, edict_t *, edict_t *);
extern void Use_Target_Tent(edict_t *, edict_t *, edict_t *);
extern void walkmonster_start_go(edict_t *);
const save_ptr_t save_ptrs[] = {
{ P_prethink, save_ptr_encode(misc_viper_bomb_prethink) },
{ P_think, save_ptr_encode(AngleMove_Begin) },
{ P_think, save_ptr_encode(AngleMove_Done) },
{ P_think, save_ptr_encode(AngleMove_Final) },
{ P_think, save_ptr_encode(barrel_explode) },
{ P_think, save_ptr_encode(bfg_explode) },
{ P_think, save_ptr_encode(bfg_think) },
{ P_think, save_ptr_encode(BossExplode) },
{ P_think, save_ptr_encode(button_return) },
{ P_think, save_ptr_encode(commander_body_drop) },
{ P_think, save_ptr_encode(commander_body_think) },
{ P_think, save_ptr_encode(door_go_down) },
{ P_think, save_ptr_encode(door_secret_move2) },
{ P_think, save_ptr_encode(door_secret_move4) },
{ P_think, save_ptr_encode(door_secret_move6) },
{ P_think, save_ptr_encode(DoRespawn) },
{ P_think, save_ptr_encode(drop_make_touchable) },
{ P_think, save_ptr_encode(droptofloor) },
{ P_think, save_ptr_encode(flymonster_start_go) },
{ P_think, save_ptr_encode(func_clock_think) },
{ P_think, save_ptr_encode(func_object_release) },
{ P_think, save_ptr_encode(func_timer_think) },
{ P_think, save_ptr_encode(func_train_find) },
{ P_think, save_ptr_encode(G_FreeEdict) },
{ P_think, save_ptr_encode(gib_think) },
{ P_think, save_ptr_encode(Grenade_Explode) },
{ P_think, save_ptr_encode(hover_deadthink) },
{ P_think, save_ptr_encode(M_droptofloor) },
{ P_think, save_ptr_encode(M_FliesOff) },
{ P_think, save_ptr_encode(M_FliesOn) },
{ P_think, save_ptr_encode(makron_torso_think) },
{ P_think, save_ptr_encode(MakronSpawn) },
{ P_think, save_ptr_encode(MegaHealth_think) },
{ P_think, save_ptr_encode(misc_banner_think) },
{ P_think, save_ptr_encode(misc_blackhole_think) },
{ P_think, save_ptr_encode(misc_easterchick2_think) },
{ P_think, save_ptr_encode(misc_easterchick_think) },
{ P_think, save_ptr_encode(misc_eastertank_think) },
{ P_think, save_ptr_encode(misc_satellite_dish_think) },
{ P_think, save_ptr_encode(monster_think) },
{ P_think, save_ptr_encode(monster_triggered_spawn) },
{ P_think, save_ptr_encode(Move_Begin) },
{ P_think, save_ptr_encode(Move_Done) },
{ P_think, save_ptr_encode(Move_Final) },
{ P_think, save_ptr_encode(multi_wait) },
{ P_think, save_ptr_encode(plat_go_down) },
{ P_think, save_ptr_encode(SP_CreateCoopSpots) },
{ P_think, save_ptr_encode(SP_FixCoopSpots) },
{ P_think, save_ptr_encode(swimmonster_start_go) },
{ P_think, save_ptr_encode(target_crosslevel_target_think) },
{ P_think, save_ptr_encode(target_earthquake_think) },
{ P_think, save_ptr_encode(target_explosion_explode) },
{ P_think, save_ptr_encode(target_laser_start) },
{ P_think, save_ptr_encode(target_laser_think) },
{ P_think, save_ptr_encode(target_lightramp_think) },
{ P_think, save_ptr_encode(TH_viewthing) },
{ P_think, save_ptr_encode(Think_AccelMove) },
{ P_think, save_ptr_encode(Think_Boss3Stand) },
{ P_think, save_ptr_encode(Think_CalcMoveSpeed) },
{ P_think, save_ptr_encode(Think_Delay) },
{ P_think, save_ptr_encode(Think_SpawnDoorTrigger) },
{ P_think, save_ptr_encode(train_next) },
{ P_think, save_ptr_encode(trigger_elevator_init) },
{ P_think, save_ptr_encode(turret_breach_finish_init) },
{ P_think, save_ptr_encode(turret_breach_think) },
{ P_think, save_ptr_encode(turret_driver_link) },
{ P_think, save_ptr_encode(turret_driver_think) },
{ P_think, save_ptr_encode(walkmonster_start_go) },
{ P_blocked, save_ptr_encode(door_blocked) },
{ P_blocked, save_ptr_encode(door_secret_blocked) },
{ P_blocked, save_ptr_encode(plat_blocked) },
{ P_blocked, save_ptr_encode(rotating_blocked) },
{ P_blocked, save_ptr_encode(train_blocked) },
{ P_blocked, save_ptr_encode(turret_blocked) },
{ P_touch, save_ptr_encode(barrel_touch) },
{ P_touch, save_ptr_encode(bfg_touch) },
{ P_touch, save_ptr_encode(blaster_touch) },
{ P_touch, save_ptr_encode(button_touch) },
{ P_touch, save_ptr_encode(door_touch) },
{ P_touch, save_ptr_encode(drop_temp_touch) },
{ P_touch, save_ptr_encode(func_object_touch) },
{ P_touch, save_ptr_encode(gib_touch) },
{ P_touch, save_ptr_encode(Grenade_Touch) },
{ P_touch, save_ptr_encode(hurt_touch) },
{ P_touch, save_ptr_encode(misc_viper_bomb_touch) },
{ P_touch, save_ptr_encode(mutant_jump_touch) },
{ P_touch, save_ptr_encode(path_corner_touch) },
{ P_touch, save_ptr_encode(point_combat_touch) },
{ P_touch, save_ptr_encode(rocket_touch) },
{ P_touch, save_ptr_encode(rotating_touch) },
{ P_touch, save_ptr_encode(target_actor_touch) },
{ P_touch, save_ptr_encode(teleporter_touch) },
{ P_touch, save_ptr_encode(Touch_DoorTrigger) },
{ P_touch, save_ptr_encode(Touch_Item) },
{ P_touch, save_ptr_encode(Touch_Multi) },
{ P_touch, save_ptr_encode(Touch_Plat_Center) },
{ P_touch, save_ptr_encode(trigger_gravity_touch) },
{ P_touch, save_ptr_encode(trigger_monsterjump_touch) },
{ P_touch, save_ptr_encode(trigger_push_touch) },
{ P_use, save_ptr_encode(actor_use) },
{ P_use, save_ptr_encode(button_use) },
{ P_use, save_ptr_encode(commander_body_use) },
{ P_use, save_ptr_encode(door_secret_use) },
{ P_use, save_ptr_encode(door_use) },
{ P_use, save_ptr_encode(func_clock_use) },
{ P_use, save_ptr_encode(func_conveyor_use) },
{ P_use, save_ptr_encode(func_explosive_spawn) },
{ P_use, save_ptr_encode(func_explosive_use) },
{ P_use, save_ptr_encode(func_object_use) },
{ P_use, save_ptr_encode(func_timer_use) },
{ P_use, save_ptr_encode(func_wall_use) },
{ P_use, save_ptr_encode(hurt_use) },
{ P_use, save_ptr_encode(light_use) },
{ P_use, save_ptr_encode(misc_blackhole_use) },
{ P_use, save_ptr_encode(misc_satellite_dish_use) },
{ P_use, save_ptr_encode(misc_strogg_ship_use) },
{ P_use, save_ptr_encode(misc_viper_bomb_use) },
{ P_use, save_ptr_encode(misc_viper_use) },
{ P_use, save_ptr_encode(monster_triggered_spawn_use) },
{ P_use, save_ptr_encode(monster_use) },
{ P_use, save_ptr_encode(rotating_use) },
{ P_use, save_ptr_encode(target_earthquake_use) },
{ P_use, save_ptr_encode(target_laser_use) },
{ P_use, save_ptr_encode(target_lightramp_use) },
{ P_use, save_ptr_encode(target_string_use) },
{ P_use, save_ptr_encode(train_use) },
{ P_use, save_ptr_encode(trigger_counter_use) },
{ P_use, save_ptr_encode(trigger_crosslevel_trigger_use) },
{ P_use, save_ptr_encode(trigger_elevator_use) },
{ P_use, save_ptr_encode(trigger_enable) },
{ P_use, save_ptr_encode(trigger_key_use) },
{ P_use, save_ptr_encode(trigger_relay_use) },
{ P_use, save_ptr_encode(Use_Areaportal) },
{ P_use, save_ptr_encode(Use_Boss3) },
{ P_use, save_ptr_encode(Use_Item) },
{ P_use, save_ptr_encode(use_killbox) },
{ P_use, save_ptr_encode(Use_Multi) },
{ P_use, save_ptr_encode(Use_Plat) },
{ P_use, save_ptr_encode(use_target_blaster) },
{ P_use, save_ptr_encode(use_target_changelevel) },
{ P_use, save_ptr_encode(use_target_explosion) },
{ P_use, save_ptr_encode(use_target_goal) },
{ P_use, save_ptr_encode(Use_Target_Help) },
{ P_use, save_ptr_encode(use_target_secret) },
{ P_use, save_ptr_encode(use_target_spawner) },
{ P_use, save_ptr_encode(Use_Target_Speaker) },
{ P_use, save_ptr_encode(use_target_splash) },
{ P_use, save_ptr_encode(Use_Target_Tent) },
{ P_pain, save_ptr_encode(actor_pain) },
{ P_pain, save_ptr_encode(berserk_pain) },
{ P_pain, save_ptr_encode(boss2_pain) },
{ P_pain, save_ptr_encode(brain_pain) },
{ P_pain, save_ptr_encode(chick_pain) },
{ P_pain, save_ptr_encode(flipper_pain) },
{ P_pain, save_ptr_encode(floater_pain) },
{ P_pain, save_ptr_encode(flyer_pain) },
{ P_pain, save_ptr_encode(gladiator_pain) },
{ P_pain, save_ptr_encode(gunner_pain) },
{ P_pain, save_ptr_encode(hover_pain) },
{ P_pain, save_ptr_encode(infantry_pain) },
{ P_pain, save_ptr_encode(insane_pain) },
{ P_pain, save_ptr_encode(jorg_pain) },
{ P_pain, save_ptr_encode(makron_pain) },
{ P_pain, save_ptr_encode(medic_pain) },
{ P_pain, save_ptr_encode(mutant_pain) },
{ P_pain, save_ptr_encode(parasite_pain) },
{ P_pain, save_ptr_encode(player_pain) },
{ P_pain, save_ptr_encode(soldier_pain) },
{ P_pain, save_ptr_encode(supertank_pain) },
{ P_pain, save_ptr_encode(tank_pain) },
{ P_die, save_ptr_encode(actor_die) },
{ P_die, save_ptr_encode(barrel_delay) },
{ P_die, save_ptr_encode(berserk_die) },
{ P_die, save_ptr_encode(body_die) },
{ P_die, save_ptr_encode(boss2_die) },
{ P_die, save_ptr_encode(brain_die) },
{ P_die, save_ptr_encode(button_killed) },
{ P_die, save_ptr_encode(chick_die) },
{ P_die, save_ptr_encode(debris_die) },
{ P_die, save_ptr_encode(door_killed) },
{ P_die, save_ptr_encode(door_secret_die) },
{ P_die, save_ptr_encode(flipper_die) },
{ P_die, save_ptr_encode(floater_die) },
{ P_die, save_ptr_encode(flyer_die) },
{ P_die, save_ptr_encode(func_explosive_explode) },
{ P_die, save_ptr_encode(gib_die) },
{ P_die, save_ptr_encode(gladiator_die) },
{ P_die, save_ptr_encode(gunner_die) },
{ P_die, save_ptr_encode(hover_die) },
{ P_die, save_ptr_encode(infantry_die) },
{ P_die, save_ptr_encode(insane_die) },
{ P_die, save_ptr_encode(jorg_die) },
{ P_die, save_ptr_encode(makron_die) },
{ P_die, save_ptr_encode(medic_die) },
{ P_die, save_ptr_encode(misc_deadsoldier_die) },
{ P_die, save_ptr_encode(mutant_die) },
{ P_die, save_ptr_encode(parasite_die) },
{ P_die, save_ptr_encode(player_die) },
{ P_die, save_ptr_encode(soldier_die) },
{ P_die, save_ptr_encode(supertank_die) },
{ P_die, save_ptr_encode(tank_die) },
{ P_die, save_ptr_encode(turret_driver_die) },
{ P_moveinfo_endfunc, save_ptr_encode(button_done) },
{ P_moveinfo_endfunc, save_ptr_encode(button_wait) },
{ P_moveinfo_endfunc, save_ptr_encode(door_hit_bottom) },
{ P_moveinfo_endfunc, save_ptr_encode(door_hit_top) },
{ P_moveinfo_endfunc, save_ptr_encode(door_secret_done) },
{ P_moveinfo_endfunc, save_ptr_encode(door_secret_move1) },
{ P_moveinfo_endfunc, save_ptr_encode(door_secret_move3) },
{ P_moveinfo_endfunc, save_ptr_encode(door_secret_move5) },
{ P_moveinfo_endfunc, save_ptr_encode(plat_hit_bottom) },
{ P_moveinfo_endfunc, save_ptr_encode(plat_hit_top) },
{ P_moveinfo_endfunc, save_ptr_encode(train_wait) },
{ P_monsterinfo_currentmove, save_ptr_encode(&actor_move_attack) },
{ P_monsterinfo_currentmove, save_ptr_encode(&actor_move_death1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&actor_move_death2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&actor_move_flipoff) },
{ P_monsterinfo_currentmove, save_ptr_encode(&actor_move_pain1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&actor_move_pain2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&actor_move_pain3) },
{ P_monsterinfo_currentmove, save_ptr_encode(&actor_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&actor_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&actor_move_taunt) },
{ P_monsterinfo_currentmove, save_ptr_encode(&actor_move_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&berserk_move_attack_club) },
{ P_monsterinfo_currentmove, save_ptr_encode(&berserk_move_attack_spike) },
{ P_monsterinfo_currentmove, save_ptr_encode(&berserk_move_death1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&berserk_move_death2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&berserk_move_pain1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&berserk_move_pain2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&berserk_move_run1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&berserk_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&berserk_move_stand_fidget) },
{ P_monsterinfo_currentmove, save_ptr_encode(&berserk_move_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&boss2_move_attack_mg) },
{ P_monsterinfo_currentmove, save_ptr_encode(&boss2_move_attack_post_mg) },
{ P_monsterinfo_currentmove, save_ptr_encode(&boss2_move_attack_pre_mg) },
{ P_monsterinfo_currentmove, save_ptr_encode(&boss2_move_attack_rocket) },
{ P_monsterinfo_currentmove, save_ptr_encode(&boss2_move_death) },
{ P_monsterinfo_currentmove, save_ptr_encode(&boss2_move_pain_heavy) },
{ P_monsterinfo_currentmove, save_ptr_encode(&boss2_move_pain_light) },
{ P_monsterinfo_currentmove, save_ptr_encode(&boss2_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&boss2_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&boss2_move_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&brain_move_attack1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&brain_move_attack2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&brain_move_death1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&brain_move_death2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&brain_move_duck) },
{ P_monsterinfo_currentmove, save_ptr_encode(&brain_move_idle) },
{ P_monsterinfo_currentmove, save_ptr_encode(&brain_move_pain1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&brain_move_pain2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&brain_move_pain3) },
{ P_monsterinfo_currentmove, save_ptr_encode(&brain_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&brain_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&brain_move_walk1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&chick_move_attack1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&chick_move_death1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&chick_move_death2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&chick_move_duck) },
{ P_monsterinfo_currentmove, save_ptr_encode(&chick_move_end_attack1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&chick_move_end_slash) },
{ P_monsterinfo_currentmove, save_ptr_encode(&chick_move_fidget) },
{ P_monsterinfo_currentmove, save_ptr_encode(&chick_move_pain1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&chick_move_pain2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&chick_move_pain3) },
{ P_monsterinfo_currentmove, save_ptr_encode(&chick_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&chick_move_slash) },
{ P_monsterinfo_currentmove, save_ptr_encode(&chick_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&chick_move_start_attack1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&chick_move_start_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&chick_move_start_slash) },
{ P_monsterinfo_currentmove, save_ptr_encode(&chick_move_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flipper_move_attack) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flipper_move_death) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flipper_move_pain1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flipper_move_pain2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flipper_move_run_loop) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flipper_move_run_start) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flipper_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flipper_move_start_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flipper_move_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&floater_move_attack1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&floater_move_attack2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&floater_move_attack3) },
{ P_monsterinfo_currentmove, save_ptr_encode(&floater_move_pain1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&floater_move_pain2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&floater_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&floater_move_stand1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&floater_move_stand2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&floater_move_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flyer_move_attack2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flyer_move_end_melee) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flyer_move_loop_melee) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flyer_move_pain1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flyer_move_pain2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flyer_move_pain3) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flyer_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flyer_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flyer_move_start_melee) },
{ P_monsterinfo_currentmove, save_ptr_encode(&flyer_move_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gladiator_move_attack_gun) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gladiator_move_attack_melee) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gladiator_move_death) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gladiator_move_pain) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gladiator_move_pain_air) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gladiator_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gladiator_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gladiator_move_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gunner_move_attack_chain) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gunner_move_attack_grenade) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gunner_move_death) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gunner_move_duck) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gunner_move_endfire_chain) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gunner_move_fidget) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gunner_move_fire_chain) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gunner_move_pain1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gunner_move_pain2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gunner_move_pain3) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gunner_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gunner_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&gunner_move_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&hover_move_attack1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&hover_move_death1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&hover_move_end_attack) },
{ P_monsterinfo_currentmove, save_ptr_encode(&hover_move_pain1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&hover_move_pain2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&hover_move_pain3) },
{ P_monsterinfo_currentmove, save_ptr_encode(&hover_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&hover_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&hover_move_start_attack) },
{ P_monsterinfo_currentmove, save_ptr_encode(&hover_move_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&infantry_move_attack1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&infantry_move_attack2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&infantry_move_death1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&infantry_move_death2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&infantry_move_death3) },
{ P_monsterinfo_currentmove, save_ptr_encode(&infantry_move_duck) },
{ P_monsterinfo_currentmove, save_ptr_encode(&infantry_move_fidget) },
{ P_monsterinfo_currentmove, save_ptr_encode(&infantry_move_pain1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&infantry_move_pain2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&infantry_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&infantry_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&infantry_move_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_crawl) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_crawl_death) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_crawl_pain) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_cross) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_down) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_downtoup) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_jumpdown) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_run_insane) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_run_normal) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_runcrawl) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_stand_death) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_stand_insane) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_stand_normal) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_stand_pain) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_struggle_cross) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_uptodown) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_walk_insane) },
{ P_monsterinfo_currentmove, save_ptr_encode(&insane_move_walk_normal) },
{ P_monsterinfo_currentmove, save_ptr_encode(&jorg_move_attack1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&jorg_move_attack2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&jorg_move_death) },
{ P_monsterinfo_currentmove, save_ptr_encode(&jorg_move_end_attack1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&jorg_move_pain1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&jorg_move_pain2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&jorg_move_pain3) },
{ P_monsterinfo_currentmove, save_ptr_encode(&jorg_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&jorg_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&jorg_move_start_attack1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&jorg_move_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&makron_move_attack3) },
{ P_monsterinfo_currentmove, save_ptr_encode(&makron_move_attack4) },
{ P_monsterinfo_currentmove, save_ptr_encode(&makron_move_attack5) },
{ P_monsterinfo_currentmove, save_ptr_encode(&makron_move_death2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&makron_move_pain4) },
{ P_monsterinfo_currentmove, save_ptr_encode(&makron_move_pain5) },
{ P_monsterinfo_currentmove, save_ptr_encode(&makron_move_pain6) },
{ P_monsterinfo_currentmove, save_ptr_encode(&makron_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&makron_move_sight) },
{ P_monsterinfo_currentmove, save_ptr_encode(&makron_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&makron_move_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&medic_move_attackBlaster) },
{ P_monsterinfo_currentmove, save_ptr_encode(&medic_move_attackCable) },
{ P_monsterinfo_currentmove, save_ptr_encode(&medic_move_attackHyperBlaster) },
{ P_monsterinfo_currentmove, save_ptr_encode(&medic_move_death) },
{ P_monsterinfo_currentmove, save_ptr_encode(&medic_move_duck) },
{ P_monsterinfo_currentmove, save_ptr_encode(&medic_move_pain1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&medic_move_pain2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&medic_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&medic_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&medic_move_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&mutant_move_attack) },
{ P_monsterinfo_currentmove, save_ptr_encode(&mutant_move_death1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&mutant_move_death2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&mutant_move_idle) },
{ P_monsterinfo_currentmove, save_ptr_encode(&mutant_move_jump) },
{ P_monsterinfo_currentmove, save_ptr_encode(&mutant_move_pain1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&mutant_move_pain2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&mutant_move_pain3) },
{ P_monsterinfo_currentmove, save_ptr_encode(&mutant_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&mutant_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&mutant_move_start_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&mutant_move_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&parasite_move_death) },
{ P_monsterinfo_currentmove, save_ptr_encode(&parasite_move_drain) },
{ P_monsterinfo_currentmove, save_ptr_encode(&parasite_move_end_fidget) },
{ P_monsterinfo_currentmove, save_ptr_encode(&parasite_move_fidget) },
{ P_monsterinfo_currentmove, save_ptr_encode(&parasite_move_pain1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&parasite_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&parasite_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&parasite_move_start_fidget) },
{ P_monsterinfo_currentmove, save_ptr_encode(&parasite_move_start_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&parasite_move_start_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&parasite_move_walk) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_attack1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_attack2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_attack3) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_attack4) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_attack6) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_death1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_death2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_death3) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_death4) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_death5) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_death6) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_duck) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_pain1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_pain2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_pain3) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_pain4) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_stand1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_stand3) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_start_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_walk1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&soldier_move_walk2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&supertank_move_attack1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&supertank_move_attack2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&supertank_move_death) },
{ P_monsterinfo_currentmove, save_ptr_encode(&supertank_move_end_attack1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&supertank_move_forward) },
{ P_monsterinfo_currentmove, save_ptr_encode(&supertank_move_pain1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&supertank_move_pain2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&supertank_move_pain3) },
{ P_monsterinfo_currentmove, save_ptr_encode(&supertank_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&supertank_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&tank_move_attack_blast) },
{ P_monsterinfo_currentmove, save_ptr_encode(&tank_move_attack_chain) },
{ P_monsterinfo_currentmove, save_ptr_encode(&tank_move_attack_fire_rocket) },
{ P_monsterinfo_currentmove, save_ptr_encode(&tank_move_attack_post_blast) },
{ P_monsterinfo_currentmove, save_ptr_encode(&tank_move_attack_post_rocket) },
{ P_monsterinfo_currentmove, save_ptr_encode(&tank_move_attack_pre_rocket) },
{ P_monsterinfo_currentmove, save_ptr_encode(&tank_move_attack_strike) },
{ P_monsterinfo_currentmove, save_ptr_encode(&tank_move_death) },
{ P_monsterinfo_currentmove, save_ptr_encode(&tank_move_pain1) },
{ P_monsterinfo_currentmove, save_ptr_encode(&tank_move_pain2) },
{ P_monsterinfo_currentmove, save_ptr_encode(&tank_move_pain3) },
{ P_monsterinfo_currentmove, save_ptr_encode(&tank_move_reattack_blast) },
{ P_monsterinfo_currentmove, save_ptr_encode(&tank_move_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&tank_move_stand) },
{ P_monsterinfo_currentmove, save_ptr_encode(&tank_move_start_run) },
{ P_monsterinfo_currentmove, save_ptr_encode(&tank_move_walk) },
{ P_monsterinfo_stand, save_ptr_encode(actor_stand) },
{ P_monsterinfo_stand, save_ptr_encode(berserk_stand) },
{ P_monsterinfo_stand, save_ptr_encode(boss2_stand) },
{ P_monsterinfo_stand, save_ptr_encode(brain_stand) },
{ P_monsterinfo_stand, save_ptr_encode(chick_stand) },
{ P_monsterinfo_stand, save_ptr_encode(flipper_stand) },
{ P_monsterinfo_stand, save_ptr_encode(floater_stand) },
{ P_monsterinfo_stand, save_ptr_encode(flyer_stand) },
{ P_monsterinfo_stand, save_ptr_encode(gladiator_stand) },
{ P_monsterinfo_stand, save_ptr_encode(gunner_stand) },
{ P_monsterinfo_stand, save_ptr_encode(hover_stand) },
{ P_monsterinfo_stand, save_ptr_encode(infantry_stand) },
{ P_monsterinfo_stand, save_ptr_encode(insane_stand) },
{ P_monsterinfo_stand, save_ptr_encode(jorg_stand) },
{ P_monsterinfo_stand, save_ptr_encode(makron_stand) },
{ P_monsterinfo_stand, save_ptr_encode(medic_stand) },
{ P_monsterinfo_stand, save_ptr_encode(mutant_stand) },
{ P_monsterinfo_stand, save_ptr_encode(parasite_stand) },
{ P_monsterinfo_stand, save_ptr_encode(soldier_stand) },
{ P_monsterinfo_stand, save_ptr_encode(supertank_stand) },
{ P_monsterinfo_stand, save_ptr_encode(tank_stand) },
{ P_monsterinfo_idle, save_ptr_encode(brain_idle) },
{ P_monsterinfo_idle, save_ptr_encode(floater_idle) },
{ P_monsterinfo_idle, save_ptr_encode(flyer_idle) },
{ P_monsterinfo_idle, save_ptr_encode(gladiator_idle) },
{ P_monsterinfo_idle, save_ptr_encode(infantry_fidget) },
{ P_monsterinfo_idle, save_ptr_encode(medic_idle) },
{ P_monsterinfo_idle, save_ptr_encode(mutant_idle) },
{ P_monsterinfo_idle, save_ptr_encode(parasite_idle) },
{ P_monsterinfo_idle, save_ptr_encode(tank_idle) },
{ P_monsterinfo_search, save_ptr_encode(berserk_search) },
{ P_monsterinfo_search, save_ptr_encode(boss2_search) },
{ P_monsterinfo_search, save_ptr_encode(brain_search) },
{ P_monsterinfo_search, save_ptr_encode(gladiator_search) },
{ P_monsterinfo_search, save_ptr_encode(gunner_search) },
{ P_monsterinfo_search, save_ptr_encode(hover_search) },
{ P_monsterinfo_search, save_ptr_encode(jorg_search) },
{ P_monsterinfo_search, save_ptr_encode(medic_search) },
{ P_monsterinfo_search, save_ptr_encode(mutant_search) },
{ P_monsterinfo_search, save_ptr_encode(supertank_search) },
{ P_monsterinfo_walk, save_ptr_encode(actor_walk) },
{ P_monsterinfo_walk, save_ptr_encode(berserk_walk) },
{ P_monsterinfo_walk, save_ptr_encode(boss2_walk) },
{ P_monsterinfo_walk, save_ptr_encode(brain_walk) },
{ P_monsterinfo_walk, save_ptr_encode(chick_walk) },
{ P_monsterinfo_walk, save_ptr_encode(flipper_walk) },
{ P_monsterinfo_walk, save_ptr_encode(floater_walk) },
{ P_monsterinfo_walk, save_ptr_encode(flyer_walk) },
{ P_monsterinfo_walk, save_ptr_encode(gladiator_walk) },
{ P_monsterinfo_walk, save_ptr_encode(gunner_walk) },
{ P_monsterinfo_walk, save_ptr_encode(hover_walk) },
{ P_monsterinfo_walk, save_ptr_encode(infantry_walk) },
{ P_monsterinfo_walk, save_ptr_encode(insane_walk) },
{ P_monsterinfo_walk, save_ptr_encode(jorg_walk) },
{ P_monsterinfo_walk, save_ptr_encode(makron_walk) },
{ P_monsterinfo_walk, save_ptr_encode(medic_walk) },
{ P_monsterinfo_walk, save_ptr_encode(mutant_walk) },
{ P_monsterinfo_walk, save_ptr_encode(parasite_start_walk) },
{ P_monsterinfo_walk, save_ptr_encode(soldier_walk) },
{ P_monsterinfo_walk, save_ptr_encode(supertank_walk) },
{ P_monsterinfo_walk, save_ptr_encode(tank_walk) },
{ P_monsterinfo_run, save_ptr_encode(actor_run) },
{ P_monsterinfo_run, save_ptr_encode(berserk_run) },
{ P_monsterinfo_run, save_ptr_encode(boss2_run) },
{ P_monsterinfo_run, save_ptr_encode(brain_run) },
{ P_monsterinfo_run, save_ptr_encode(chick_run) },
{ P_monsterinfo_run, save_ptr_encode(flipper_start_run) },
{ P_monsterinfo_run, save_ptr_encode(floater_run) },
{ P_monsterinfo_run, save_ptr_encode(flyer_run) },
{ P_monsterinfo_run, save_ptr_encode(gladiator_run) },
{ P_monsterinfo_run, save_ptr_encode(gunner_run) },
{ P_monsterinfo_run, save_ptr_encode(hover_run) },
{ P_monsterinfo_run, save_ptr_encode(infantry_run) },
{ P_monsterinfo_run, save_ptr_encode(insane_run) },
{ P_monsterinfo_run, save_ptr_encode(jorg_run) },
{ P_monsterinfo_run, save_ptr_encode(makron_run) },
{ P_monsterinfo_run, save_ptr_encode(medic_run) },
{ P_monsterinfo_run, save_ptr_encode(mutant_run) },
{ P_monsterinfo_run, save_ptr_encode(parasite_start_run) },
{ P_monsterinfo_run, save_ptr_encode(soldier_run) },
{ P_monsterinfo_run, save_ptr_encode(supertank_run) },
{ P_monsterinfo_run, save_ptr_encode(tank_run) },
{ P_monsterinfo_dodge, save_ptr_encode(brain_dodge) },
{ P_monsterinfo_dodge, save_ptr_encode(chick_dodge) },
{ P_monsterinfo_dodge, save_ptr_encode(gunner_dodge) },
{ P_monsterinfo_dodge, save_ptr_encode(infantry_dodge) },
{ P_monsterinfo_dodge, save_ptr_encode(medic_dodge) },
{ P_monsterinfo_dodge, save_ptr_encode(soldier_dodge) },
{ P_monsterinfo_attack, save_ptr_encode(actor_attack) },
{ P_monsterinfo_attack, save_ptr_encode(boss2_attack) },
{ P_monsterinfo_attack, save_ptr_encode(chick_attack) },
{ P_monsterinfo_attack, save_ptr_encode(floater_attack) },
{ P_monsterinfo_attack, save_ptr_encode(flyer_attack) },
{ P_monsterinfo_attack, save_ptr_encode(gladiator_attack) },
{ P_monsterinfo_attack, save_ptr_encode(gunner_attack) },
{ P_monsterinfo_attack, save_ptr_encode(hover_start_attack) },
{ P_monsterinfo_attack, save_ptr_encode(infantry_attack) },
{ P_monsterinfo_attack, save_ptr_encode(jorg_attack) },
{ P_monsterinfo_attack, save_ptr_encode(makron_attack) },
{ P_monsterinfo_attack, save_ptr_encode(medic_attack) },
{ P_monsterinfo_attack, save_ptr_encode(mutant_jump) },
{ P_monsterinfo_attack, save_ptr_encode(parasite_attack) },
{ P_monsterinfo_attack, save_ptr_encode(soldier_attack) },
{ P_monsterinfo_attack, save_ptr_encode(supertank_attack) },
{ P_monsterinfo_attack, save_ptr_encode(tank_attack) },
{ P_monsterinfo_melee, save_ptr_encode(berserk_melee) },
{ P_monsterinfo_melee, save_ptr_encode(brain_melee) },
{ P_monsterinfo_melee, save_ptr_encode(chick_melee) },
{ P_monsterinfo_melee, save_ptr_encode(flipper_melee) },
{ P_monsterinfo_melee, save_ptr_encode(floater_melee) },
{ P_monsterinfo_melee, save_ptr_encode(flyer_melee) },
{ P_monsterinfo_melee, save_ptr_encode(gladiator_melee) },
{ P_monsterinfo_melee, save_ptr_encode(mutant_melee) },
{ P_monsterinfo_sight, save_ptr_encode(berserk_sight) },
{ P_monsterinfo_sight, save_ptr_encode(brain_sight) },
{ P_monsterinfo_sight, save_ptr_encode(chick_sight) },
{ P_monsterinfo_sight, save_ptr_encode(flipper_sight) },
{ P_monsterinfo_sight, save_ptr_encode(floater_sight) },
{ P_monsterinfo_sight, save_ptr_encode(flyer_sight) },
{ P_monsterinfo_sight, save_ptr_encode(gladiator_sight) },
{ P_monsterinfo_sight, save_ptr_encode(gunner_sight) },
{ P_monsterinfo_sight, save_ptr_encode(hover_sight) },
{ P_monsterinfo_sight, save_ptr_encode(infantry_sight) },
{ P_monsterinfo_sight, save_ptr_encode(makron_sight) },
{ P_monsterinfo_sight, save_ptr_encode(medic_sight) },
{ P_monsterinfo_sight, save_ptr_encode(mutant_sight) },
{ P_monsterinfo_sight, save_ptr_encode(parasite_sight) },
{ P_monsterinfo_sight, save_ptr_encode(soldier_sight) },
{ P_monsterinfo_sight, save_ptr_encode(tank_sight) },
{ P_monsterinfo_checkattack, save_ptr_encode(Boss2_CheckAttack) },
{ P_monsterinfo_checkattack, save_ptr_encode(Jorg_CheckAttack) },
{ P_monsterinfo_checkattack, save_ptr_encode(M_CheckAttack) },
{ P_monsterinfo_checkattack, save_ptr_encode(Makron_CheckAttack) },
{ P_monsterinfo_checkattack, save_ptr_encode(medic_checkattack) },
{ P_monsterinfo_checkattack, save_ptr_encode(mutant_checkattack) },
};
const int num_save_ptrs = sizeof(save_ptrs) / sizeof(save_ptrs[0]);
